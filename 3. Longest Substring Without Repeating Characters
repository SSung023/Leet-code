class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        //s contains english, digits, symbols, spaces
        deque<char> dq;
        unordered_map<char, int> hashmap;
        int cnt = 0, result = 0;

        for(int i = 0; i < s.length(); i++){
            char cur = s[i];

            if(hashmap.count(cur) == 0){ // not exists
                hashmap[cur] = 1;
                dq.push_back(cur);
                cnt++;
            }
            else{ // exists
                result = max(cnt, result);
                char tmp = cur;
                while(true){
                    if(dq.front() == tmp){
                        dq.pop_front();
                        cnt--;
                        break;
                    }
                    hashmap.erase(dq.front());
                    dq.pop_front();
                    cnt--;
                }
                dq.push_back(tmp);
                cnt++;
            }
        }
        result = max(result, cnt);
        return result;
    }
};
