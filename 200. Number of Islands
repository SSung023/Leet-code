int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};

bool BFS(vector<vector<char>>& grid, vector<vector<bool>>& isVisited, int height, int width, int y, int x){
    queue<pair<int, int>> q;
    q.push({y, x});
    isVisited[y][x] = true;

    while(!q.empty()){
        int cur_y = q.front().first;
        int cur_x = q.front().second;
        q.pop();

        for(int i = 0; i < 4; i++){
            int ny = cur_y + dy[i];
            int nx = cur_x + dx[i];
            if(((0 <= ny && ny < height) && (0 <= nx && nx < width)) && !isVisited[ny][nx] && grid[ny][nx] == '1'){
                q.push({ny, nx});
                isVisited[ny][nx] = true;
            }
        }
    }
}

int numIslands(vector<vector<char>>& grid) {
    int height = grid.size();
    int width = grid[0].size();
    int result = 0;

    vector<vector<bool>> isVisited;
    isVisited.assign(height, vector<bool>(width, false));

    for(int i = 0; i < height; i++){
        for(int k = 0; k < width; k++){
            if(!isVisited[i][k] && grid[i][k] == '1'){
                BFS(grid, isVisited, height, width, i, k);
                result++;
            }
        }
    }

    return result;
}
