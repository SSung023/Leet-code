/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool checkChild(TreeNode* leftChild, TreeNode* rightChild){
        if(!leftChild || !rightChild){
            return leftChild == rightChild;
        }
        if(leftChild->val == rightChild->val){
            // 대칭의 유무를 확인
            return checkChild(leftChild->left, rightChild->right) && checkChild(leftChild->right, rightChild->left);
        }
        else{
            return false;
        }
    }
    
    bool isSymmetric(TreeNode* root) {
        if(!root)   return false;
        
        if(root->left && root->right){
            return checkChild(root->left, root->right);
        }
        return root->left == root->right;
    }
};

/* 
알고리즘
대칭적이라는 뜻은 곧 같은 레벨에서 left->val의 값과 right->val의 값이 같아야 한다는 뜻이다.
left와 right 모두 nullptr이 아니라면 좌우가 모두 대칭인지 확인한다.
*/
