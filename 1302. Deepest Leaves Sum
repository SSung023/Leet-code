/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:    
    int deepestLeavesSum(TreeNode* root) {
        int max_level = 0, result = 0;
        unordered_multimap<int, int> hashmap;
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});


        while(!q.empty()){
            TreeNode* cur = q.front().first; // 현재 노드
            int cur_level = q.front().second; // 현재 노드의 레벨
            q.pop();

            max_level = max(max_level, cur_level);
            hashmap.insert({cur_level, cur->val});

            if(cur->left != nullptr){
                q.push({cur->left, cur_level + 1});
            }
            if(cur->right != nullptr){
                q.push({cur->right, cur_level + 1});
            }
        }

        for(auto iter = hashmap.lower_bound(max_level); iter != hashmap.upper_bound(max_level); iter++){
            result += iter->second;
        }
        return result;
    }
};
